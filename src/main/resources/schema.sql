DROP TABLE IF EXISTS users, friends, mpa, films, genres, film_genres, likes;

CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR (100) NOT NULL,
    login VARCHAR (30) NOT NULL,
    name VARCHAR (100) NOT NULL,
    birthday DATE NOT NULL,
    CONSTRAINT user_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS friends (
    user_id INTEGER NOT NULL REFERENCES users (user_id),
    friend_id INTEGER NOT NULL REFERENCES users (user_id),
    status BOOLEAN
);

CREATE TABLE IF NOT EXISTS mpa (
    mpa_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR (30)
);

CREATE TABLE IF NOT EXISTS films (
    film_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR (100) NOT NULL,
    description VARCHAR (200) NOT NULL,
    release_date DATE NOT NULL,
    duration INTEGER NOT NULL,
    mpa_id INTEGER NOT NULL,
    likes_counter INTEGER,
    CONSTRAINT films_fk FOREIGN KEY (mpa_id) REFERENCES mpa (mpa_id)
);

CREATE TABLE IF NOT EXISTS genres (
    genre_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR (80),
    CONSTRAINT genre_name UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS film_genres (
    film_id INTEGER NOT NULL,
    genre_id INTEGER NOT NULL,
    CONSTRAINT film_id_film_genres_fk FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE,
    CONSTRAINT genre_id_film_genres_fk FOREIGN KEY (genre_id) REFERENCES genres (genre_id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS likes (
    film_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    CONSTRAINT film_id_likes_fk FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE,
    CONSTRAINT user_id_likes_fk FOREIGN KEY (user_id) REFERENCES users (user_id),
    CONSTRAINT likes_unique UNIQUE (film_id, user_id)
);